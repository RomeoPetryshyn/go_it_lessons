console.log('Executing script');
//
//
//
// 0.1 Обговоримо що таке REST і як відбувається комунікація з сервером в сучасних веб додатках
//
//
//
// 0.2 Обговоримо базові методи запитів на сервер CRUD:
// C - Create (створити)
// R - Read (дістати, прочитати)
// U - Update (оновити)
// D - Delete (видалити)
//
//
//
// 1. Будемо писати додаток який показує погоду в різних містах світу.
// Дані буде завантажувати з публічного API openweathermap.
// function refreshWeather() {
//     // список міст з ідентифікаторами
//     const cities = [
//         { name: 'London', id: '2643743' },
//         { name: 'Kyiv', id: '703448' },
//         { name: 'Paris', id: '2988507' },
//         { name: 'Madrid', id: '3117735' },
//         { name: 'New York', id: '5128581' },
//         { name: 'Amsterdam', id: '2759794' },
//         { name: 'Lviv', id: '702550' },
//         { name: 'Berlin', id: '2950159' },
//         { name: 'Tokyo', id: '1850144' },
//         { name: 'Pekin', id: '1816670' },
//         { name: 'Rome', id: '3169070' },
//     ];
//     // допоміжний функціонал:
//     // temp = data.main.temp - 273.15;
//     // document.getElementById(city.name).innerHTML = `${Math.round(temp)}&deg;C <img src = "http://openweathermap.org/img/wn/${weather}.png">`
//     // response.json()
//     // Використовуємо fetch
// }
//
//
//
// 2. В нас є продуктовий інтернет магазин. Є невеличкий написаний бек-енд який
// повертатиме нам список продуктів для цього магазину.
// При завантаженні сторінки ми показуватимемо лише продукти які йдуть зі знижкою.
// Також у нас буде реалізована кнопка ЗАВАНТАЖИТИ ВСІ при натисканні на яку
// нам потрібно показувати всі продукти які є (включно з тими які без знижки).
// Посилання на наше API: http://localhost:3000/products?loadAll=true
//
//
//
// 3. До попереднього додатку завантаження списку продуктів спробуємо реалізувати
// Обробку помилок. Будемо модифікувати наш бек-енд щоб він нам відправляв різні помилки
// і ми на їх основі виводили користувачу якийсь результат.
//
//
//