// 0.1
// Мікро процеси (МАЮТЬ ВИЩИЙ ПРІОРИТЕТ):
// Promise
// Observer
//
// Макро процеси (МАЮТЬ НИЖЧИЙ ПРІОРИТЕТ):
// setTimeout
// setInterval
// setImmediate
//
//
//
// 0.2
// Розглянемо декілька промісів для наочності
// const promise = new Promise((res, rej) => {
//     setTimeout(() => {
//         const randomNumber = Math.random();
//         if (randomNumber > 0.5) {
//             res('YES');
//         } else {
//             rej('NO');
//         }
//     }, 2000);
// });
// console.log(promise);
// promise
//     .then(value => console.log(value))
//     .catch(error => console.error(error))
//     .finally(() => console.log('Experiment completed'));
//
//
//
// 1. Напишемо коротенький скрипт на базі промісів.
// Наш товариш Jake ПООБІЦЯВ (promise) нам виконати свою роботу протягом наступних 
// Трьох годин. В нас є змінна з булевим значенням під назвою didJakeDidHisJob 
// яка несе в собі інформацію про те чи виконав Jake те що обіцяв чи ні.
// Нам необхідно зачекати певний час і зробити перевірку, якщо Jake виконався свою роботу - тоді
// будемо виводити в консоль слова вдячності. Якщо ні - будемо виводити error який висловить розпач.
//
//
//
// 2. Jake пішов далі. Тепер він дав нам ДЕКІЛЬКА ОБІЦЯНОК одразу. Одна - про те що він
// виконає свою роботу. Друга - про те що він допоможе колезі з його завданням.
// Третя - про те що він пригостить нас всіх смачною кавою.
// Проте наша довіра до Jake вже похитнулась і якщо він не виконає хоча ще одну зі своїх
// обіцянок - нам не цікавий результат інших. Реалізуємо дану логіку використовуючи Promise
// Promise.all & Promise.allSettled
//
//
//
// 3. Пішля того як Jake підвів команду та втратив довіру - його звільнили з роботи.
// Наш Jake почав шукати нову роботу. Декілька роботодавців з якими він хоче співпрацювати
// пообіцяли йому робоче місце. Тепер Jake очікує доки йому надійде перша офіційна пропозиція
// щоб її прийняти. Реалізуємо дану логіку використовуючи Promise
// Promise.race
//
//
//
// 4. Будемо писати функціонал для отримання списку користувачів і виводу їх на сторінку.
// При написанні цього симулюватимемо реальний запит на бек-енд і симулюватимемо
// успішне чи не успішне виконання цього запиту. В залежності від цього - будемо змінювати вивід.
// const success = false;
// function getUsers() {
//     return new Promise((resolve, reject) => {
//         setTimeout(() => {
//           if (success) {
//             // do something on success
//           } else {
//             // do something on fail
//           }
//         }, 3000);
//     });
// }
//
//
//